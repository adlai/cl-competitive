(defun parse-fixnum (simple-base-string &key (start 0) end)
  "Is a variant of SBCL(x64)'s PARSE-INTEGER, specialized for FIXNUM."
  (declare (optimize (speed 3)))
  (sb-c::with-array-data ((string simple-base-string :offset-var offset)
                          (start start)
                          (end end)
                          :check-fill-pointer t)
    (let ((index (do ((i start (1+ i)))
                     ((= i end)
                      (return-from parse-fixnum (values nil end)))
                   (declare (fixnum i))
                   (unless (char= #\Space (schar string i)) (return i))))
          (minusp nil)
          (result 0))
      (declare (fixnum index result)
               (integer result))
      (let ((char (schar string index)))
        (cond ((char= char #\-)
               (setq minusp t)
               (incf index))
              ((char= char #\+)
               (incf index))))
      (loop
        (when (= index end) (return nil))
        (let* ((char (schar string index))
               (weight (- (char-code char) 48)))
          (if (<= 0 weight 9)
              (setq result (+ weight (the fixnum (* result 10))))
              (return nil)))
        (incf index))
      (values
       (if minusp (- result) result)
       (- index offset)))))
