(defpackage :cp/manacher
  (:use :cl)
  (:export #:%manacher))
(in-package :cp/manacher)

(declaim (inline %manacher)
         (ftype (function * (values (simple-array (integer 0 #.most-positive-fixnum) (*))
                                    &optional))
                %manacher))
(defun %manacher (vector &optional (test #'eql))
  (declare (vector vector))
  (let* ((i 0)
         (j 0)
         (n (length vector))
         (res (make-array n :element-type '(integer 0 #.most-positive-fixnum))))
    (declare ((mod #.array-total-size-limit) i j))
    (loop (when (= i n)
            (return))
          (loop (unless (and (>= (- i j) 0)
                             (< (+ i j) n)
                             (funcall test (aref vector (- i j)) (aref vector (+ i j))))
                  (return))
                (incf j))
          (setf (aref res i) j)
          (let ((k 1))
            (declare ((mod #.array-total-size-limit) k))
            (loop (unless (and (>= (- i k) 0)
                               (< (+ k (aref res (- i k))) j))
                    (return))
                  (setf (aref res (+ i k)) (aref res (- i k)))
                  (incf k))
            (incf i k)
            (decf j k)))
    res))
