(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../succinct-bit-vector.lisp")
  (load "../displace.lisp"))

(use-package :test-util)

(defparameter *seed* (seed-random-state 0))

(with-test (:name succinct-bit-vector)
  (let ((sucbv (make-sucbv! #*101101)))
    (assert (= 0 (sucbv-rank sucbv 0)))
    (assert (= 1 (sucbv-rank sucbv 1)))
    (assert (= 1 (sucbv-rank sucbv 2)))
    (assert (= 2 (sucbv-rank sucbv 3)))
    (assert (= 3 (sucbv-rank sucbv 4)))
    (assert (= 3 (sucbv-rank sucbv 5)))
    (assert (= 4 (sucbv-rank sucbv 6)))
    ;; (signals error (sucbv-rank sucbv 7))
    (assert (= 0 (sucbv-select sucbv 0)))
    (assert (= 0 (sucbv-select sucbv 1)))
    (assert (= 2 (sucbv-select sucbv 2)))
    (assert (= 3 (sucbv-select sucbv 3)))
    (assert (= 5 (sucbv-select sucbv 4)))
    (signals error (sucbv-select sucbv 5)))
  
  ;; null case
  (let ((sucbv (make-sucbv! #*)))
    (assert (= 0 (sucbv-rank sucbv 0)))
    (assert (= 0 (sucbv-select sucbv 0))))

  ;; random case (non-multiple of +chunk-width+)
  (let* ((vec (let ((tmp (make-array 10000 :element-type 'bit)))
                (dotimes (i (length tmp) tmp)
                  (setf (aref tmp i) (random 2 *seed*)))))
         (sucbv (make-sucbv! vec))
         (sum 0))
    (assert (zerop (sucbv-select sucbv 0)))
    (dotimes (i (length vec))
      (assert (= sum (sucbv-rank sucbv i)))
      (when (= 1 (aref vec i))
        (incf sum)
        (assert (= i (sucbv-select sucbv sum))))))
  
  ;; random case (multiple of +chunk-width+)
  (let* ((vec (let ((tmp (make-array +chunk-width+ :element-type 'bit)))
                (dotimes (i (length tmp) tmp)
                  (setf (aref tmp i) (random 2 *seed*)))))
         (sucbv (make-sucbv! vec))
         (sum 0))
    (assert (zerop (sucbv-select sucbv 0)))
    (dotimes (i (length vec))
      (assert (= sum (sucbv-rank sucbv i)))
      (when (= 1 (aref vec i))
        (incf sum)
        (assert (= i (sucbv-select sucbv sum)))))))
