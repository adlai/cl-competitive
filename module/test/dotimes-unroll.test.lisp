(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../dotimes-unroll.lisp"))

(use-package :test-util)

(defun iter3 (sup)
  (let (stack)
    (dotimes-unroll (x sup 3)
      (push x stack))
    (nreverse stack)))

(with-test (:name dotimes-unroll)
  (let (stack)
    (dotimes-unroll (x 8 5) (push x stack))
    (assert (equal '(7 6 5 4 3 2 1 0) stack)))
  (let (stack)
    (dotimes-unroll (x 8 4) (push x stack))
    (assert (equal '(7 6 5 4 3 2 1 0) stack)))
  (let (stack)
    (dotimes-unroll (x 8 3) (push x stack))
    (assert (equal '(7 6 5 4 3 2 1 0) stack)))
  (let (stack)
    (dotimes-unroll (x 8 2) (push x stack))
    (assert (equal '(7 6 5 4 3 2 1 0) stack)))
  (let (stack)
    (dotimes-unroll (x 8 1) (push x stack))
    (assert (equal '(7 6 5 4 3 2 1 0) stack)))
  (let (stack)
    (dotimes-unroll (x 8 9) (push x stack))
    (assert (equal '(7 6 5 4 3 2 1 0) stack)))
  (let (stack)
    (dotimes-unroll-all (x 8) (push x stack))
    (assert (equal '(7 6 5 4 3 2 1 0) stack)))

  (assert (null (iter3 0)))
  (assert (equal '(0) (iter3 1)))
  (assert (equal '(0 1 2) (iter3 3)))
  (assert (equal '(0 1 2 3) (iter3 4)))
  (assert (equal '(0 1 2 3 4 5 6) (iter3 7)))

  ;; result
  (assert (null (dotimes-unroll (x 8 3))))
  (assert (= -1 (dotimes-unroll (x 8 3 -1)))))
