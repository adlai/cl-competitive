(defpackage :cp/test/pairing-heap
  (:use :cl :fiveam :cp/pairing-heap)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/pairing-heap)

(test pairing-heap
      (declare (notinline pheap-disj pheap-conj))
      (let (heap)
        (dolist (e (list 10 -1 2  -5 0 0 -1 11))
          (pheap-push e heap #'<))
        (is (= -5 (pheap-pop heap #'<)))
        (is (= -1 (pheap-pop heap #'<)))
        (is (= -1 (pheap-pop heap #'<)))
        (is (= 0 (pheap-pop heap #'<)))
        (is (= 0 (pheap-pop heap #'<)))
        (is (= 2 (pheap-pop heap #'<)))
        (is (= 10 (pheap-pop heap #'<)))
        (is (= 11 (pheap-pop heap #'<)))
        (is (null heap))))

(defun bench (sample)
  (declare (optimize (speed 3))
           ((unsigned-byte 32) sample))
  (let ((vector (make-array 10000 :element-type '(unsigned-byte 32)))
        (state (sb-ext:seed-random-state 0))
        heap)
    (dotimes (i (length vector))
      (setf (aref vector i) (random 1000 state)))
    (sb-ext:gc :full t)
    (time (dotimes (_ sample)
            (sb-int:dovector (e vector)
              (pheap-push e heap #'<))
            (dotimes (i (length vector))
              (pheap-pop heap #'<))))))
