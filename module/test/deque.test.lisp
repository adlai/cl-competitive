(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../deque.lisp"))

(use-package :test-util)

(declaim (notinline deque-empty-p deque-ref deque-push-front deque-pop-front deque-push-back deque-pop-back deque-reinitialize))

(with-test (:name deque)
  (let ((deque (make-deque 4)))
    ;; ()
    (assert (deque-empty-p deque))
    (signals deque-empty-error (deque-pop-back deque))
    (signals deque-empty-error (deque-pop-front deque))
    (signals deque-empty-error (deque-peek-back deque))
    (signals deque-empty-error (deque-peek-front deque))
    (signals deque-invalid-index-error (deque-ref deque 0))
    (deque-push-front 1 deque)
    (assert (= 1 (deque-ref deque 0)))
    ;; (1)
    (assert (not (deque-empty-p deque)))
    (assert (= 1 (deque-peek-front deque)))
    (assert (= 1 (deque-peek-back deque)))
    (signals deque-invalid-index-error (deque-ref deque 1))
    (deque-push-back 2 deque)
    ;; (1 2)
    (assert (= 1 (deque-ref deque 0)))
    (assert (= 2 (deque-ref deque 1)))
    (deque-push-back 3 deque)
    ;; (1 2 3)
    (assert (= 1 (deque-ref deque 0)))
    (assert (= 2 (deque-ref deque 1)))
    (assert (= 3 (deque-ref deque 2)))
    (signals deque-invalid-index-error (deque-ref deque 3))
    (deque-push-front 4 deque)
    ;; (4 1 2 3)
    (signals deque-full-error (deque-push-front 0 deque))
    (assert (= 4 (deque-ref deque 0)))
    (assert (= 1 (deque-ref deque 1)))
    (assert (= 2 (deque-ref deque 2)))
    (assert (= 3 (deque-ref deque 3)))
    (signals deque-invalid-index-error (deque-ref deque 4))
    (assert (= 4 (deque-pop-front deque)))
    ;; (1 2 3)
    (assert (= 1 (deque-ref deque 0)))
    (assert (= 2 (deque-ref deque 1)))
    (assert (= 3 (deque-ref deque 2)))
    (assert (= 1 (deque-pop-front deque)))
    ;; (2 3)
    (assert (= 2 (deque-count deque)))
    (assert (= 2 (deque-peek-front deque)))
    (assert (= 3 (deque-peek-back deque)))
    (assert (= 2 (deque-pop-front deque)))
    ;; (3)
    (deque-push-front 5 deque)
    ;; (5 3)
    (assert (= 5 (deque-ref deque 0)))
    (assert (not (deque-empty-p deque)))
    (assert (= 3 (deque-pop-back deque)))
    ;; (5)
    (assert (= 5 (deque-pop-back deque)))
    ;; ()
    (signals deque-empty-error (deque-pop-back deque))
    (assert (deque-empty-p deque))
    (deque-push-back 10 deque)
    ;; (10)
    (deque-reinitialize deque)
    (assert (deque-empty-p deque)))
  
  ;; zero length
  (let ((deque (make-deque 0)))
    (assert (deque-empty-p deque))
    (signals deque-empty-error (deque-pop-back deque))
    (signals deque-empty-error (deque-pop-front deque))
    (signals deque-invalid-index-error (deque-ref deque 0))
    (signals deque-full-error (deque-push-front 1 deque))))
