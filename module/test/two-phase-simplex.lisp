(defpackage :cp/test/two-phase-simplex
  (:use :cl :fiveam :cp/two-phase-simplex :cp/test/nearly-equal)
  (:import-from :cp/test/base #:base-suite)
  (:import-from :cp/two-phase-simplex #:%primal-simplex! #:%dual-simplex!))
(in-package :cp/test/two-phase-simplex)
(in-suite base-suite)

(defun dual (a b c)
  (destructuring-bind (m n) (array-dimensions a)
    (let ((a* (make-array (list n m) :element-type 'double-float :initial-element 0d0))
          (b* (map '(simple-array double-float (*)) #'- c))
          (c* (map '(simple-array double-float (*)) #'- b)))
      (dotimes (i m)
        (dotimes (j n)
          (setf (aref a* j i) (- (aref a i j)))))
      (values a* b* c*))))

(defun copy (a)
  (let ((res (make-array (array-dimensions a) :element-type 'double-float)))
    (replace (sb-ext:array-storage-vector res) (sb-ext:array-storage-vector a))
    res))

(defun check (a b c obj)
  (multiple-value-bind (a* b* c*) (dual a b c)
    (multiple-value-bind (obj1 prim1 dual1) (%primal-simplex! (copy a) (copy b) (copy c))
      (multiple-value-bind (obj2 prim2 dual2) (%dual-simplex! (copy a*) (copy b*) (copy c*))
        (is (nearly= 1d-8 obj obj1 (- obj2)))
        (is (nearly-equal 1d-8 (coerce prim1 'list) (coerce dual2 'list)))
        (is (nearly-equal 1d-8 (coerce dual1 'list) (coerce prim2 'list)))))))

(test two-phase-simplex
  (let ((a #2a((2d0 1d0 1d0 3d0) (1d0 3d0 1d0 2d0)))
        (b #(5d0 3d0))
        (c #(6d0 8d0 5d0 9d0)))
    (check a b c 17d0))
  (let ((a #2a((2d0 1d0) (2d0 3d0) (4d0 1d0) (1d0 5d0)))
        (b #(4d0 3d0 5d0 1d0))
        (c #(2d0 1d0)))
    (check a b c 2d0)))
