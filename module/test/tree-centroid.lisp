(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../tree-centroid.lisp"))

(use-package :test-util)

(with-test (:name tree-centroid)
  (let ((tc (make-tree-centroid (coerce #((1) (0 2) (1 3) (2))
                                        '(simple-array list (*))))))
    (dotimes (root 4)
      (multiple-value-bind (c1 childs1 c2 childs2) (tc-find-centroid tc root)
        (assert (or (and (= c1 1) (= c2 2))
                    (and (= c1 2) (= c2 1))))))
    (tc-disable-vertex tc 1)
    (signals tree-centroid-disabled-vertex-error (tc-find-centroid tc 1))
    (multiple-value-bind (c1 childs1 c2 childs2) (tc-find-centroid tc 0)
      (assert (and (= c1 0) (null c2))))
    (multiple-value-bind (c1 childs1 c2 childs2) (tc-find-centroid tc 2)
      (assert (or (and (= c1 2) (= c2 3))
                  (and (= c1 3) (= c2 2)))))))
