(defpackage :cp/test/biset
  (:use :cl :fiveam :cp/biset :cp/ref-able-treap)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/biset)
(in-suite base-suite)

(test biset/hand
  (let ((biset (make-biset 0)))
    (is (zerop (%biset-total biset)))
    (is (zerop (biset-count1 biset 0)))
    (is (zerop (biset-count biset 0 0)))
    (is (zerop (biset-count biset 0 1)))))

(test biset/random
  (let ((*random-state* (sb-ext:seed-random-state 0))
        (*test-dribble* nil))
    (loop
      for size from 10 to 1000 by 20
      for base = (make-array size :element-type 'bit :initial-element 0)
      for treap = nil
      do (dotimes (i size)
           (when (zerop (random 3))
             (setf (aref base i) 1)
             (treap-push i treap)))
         (let ((biset (make-biset size :initial-contents base)))
           (dotimes (_ 300)
             (ecase (random 3)
               (0 (let ((x (random size)))
                    (biset-set1 biset x)
                    (unless (treap-find x treap)
                      (treap-push x treap))))
               (1 (let ((x (random size)))
                    (biset-set0 biset x)
                    (treap-pop x treap)))
               (2 (let ((x (random (+ size 1))))
                    (multiple-value-bind (index key) (treap-bisect-left x treap)
                      (is (= index (biset-count1 biset x)))
                      (if (= index (treap-count treap))
                          (is (= key x))
                          (is (= key (biset-find>= biset x)))))
                    (multiple-value-bind (index key) (treap-bisect-right x treap)
                      (if (= index (treap-count treap))
                          (is (= key x))
                          (is (= key (biset-find> biset x)))))
                    (is (= (biset-count biset x 0)
                           (- x (biset-count1 biset x)))))
                (is (= (%biset-total biset) (treap-count treap)))
                (let ((rank (random (%biset-total biset))))
                  (is (= (biset-select biset rank)
                         (treap-ref treap rank)))))))))))
