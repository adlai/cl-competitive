(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../rolling-hash.lisp"))

(use-package :test-util)

(with-test (:name rolling-hash)
  (let ((rhash1 (make-rhash "asddfddfd" 1000000007 :base 1729)))
    (assert (= (rhash-query rhash1 2 6) (rhash-query rhash1 5 9)))
    (assert (= (rhash-query rhash1 2 2) (rhash-query rhash1 5 5)))
    (assert (/= (rhash-query rhash1 2 6) (rhash-query rhash1 3 7)))
    (assert (= (rhash-concat rhash1 (rhash-query rhash1 0 2) (rhash-query rhash1 5 7) 2)
               (rhash-query rhash1 0 4)))
    (signals error (make-rhash "error" 1000000006 :base 1729))
    (make-rhash "no error" 17 :base 11)
    (signals error (make-rhash "error" 17 :base 19))
    (signals error (make-rhash "error" 17 :base 17))
    (signals error (make-rhash "error" 17 :base 0))
    (assert (= (rhash-query rhash1 1 5) (rhash-vector-hash rhash1 "sddf")))
    (assert (/= (rhash-query rhash1 5 9) (rhash-vector-hash rhash1 "dddd")))
    (assert (zerop (rhash-vector-hash rhash1 "" :key (lambda (x) (+ 1 (char-code x))))))

    ;; longest common prefix
    (assert (= 0 (rhash-get-lcp rhash1 0 rhash1 3)))
    (assert (= 1 (rhash-get-lcp rhash1 2 rhash1 3)))
    (assert (= 0 (rhash-get-lcp rhash1 2 rhash1 4)))
    (assert (= 4 (rhash-get-lcp rhash1 2 rhash1 5)))
    (assert (= 7 (rhash-get-lcp rhash1 2 rhash1 2)))))
