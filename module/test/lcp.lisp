(defpackage :cp/test/lcp
  (:use :cl :fiveam :cp/lcp :cp/suffix-array)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/lcp)
(in-suite base-suite)

(test lcp
  (declare (notinline make-suffix-array make-lcp-array))
  (let* ((s "abaab")
         (sa (make-suffix-array s :order #'char<))
         (lcp (make-lcp-array s sa))
         (table (make-lcp-table sa lcp)))
    (is (= 5 (lcp-get table 0 0)))
    (is (= 0 (lcp-get table 0 1)))
    (is (= 1 (lcp-get table 0 2)))
    (is (= 2 (lcp-get table 0 3)))
    (is (= 0 (lcp-get table 0 4)))
    (is (= 0 (lcp-get table 1 0)))
    (is (= 4 (lcp-get table 1 1)))
    (is (= 0 (lcp-get table 1 2)))
    (is (= 0 (lcp-get table 1 3)))
    (is (= 1 (lcp-get table 1 4)))
    (is (= 1 (lcp-get table 2 0)))
    (is (= 0 (lcp-get table 2 1)))
    (is (= 3 (lcp-get table 2 2)))
    (is (= 1 (lcp-get table 2 3)))
    (is (= 0 (lcp-get table 2 4)))
    (is (= 2 (lcp-get table 3 0)))
    (is (= 0 (lcp-get table 3 1)))
    (is (= 1 (lcp-get table 3 2)))
    (is (= 2 (lcp-get table 3 3)))
    (is (= 0 (lcp-get table 3 4)))
    (is (= 0 (lcp-get table 4 0)))
    (is (= 1 (lcp-get table 4 1)))
    (is (= 0 (lcp-get table 4 2)))
    (is (= 0 (lcp-get table 4 3)))
    (is (= 1 (lcp-get table 4 4))))
  (finishes (let* ((s "")
                   (sa (make-suffix-array s :order #'char<))
                   (lcp (make-lcp-array s sa)))
              (make-lcp-table sa lcp))))
