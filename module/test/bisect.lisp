(defpackage :cp/test/bisect
  (:use :cl :fiveam :cp/bisect)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/bisect)
(in-suite base-suite)

(test bisect-left
  (declare (notinline bisect-left))
  (is (= 0 (bisect-left #() 1)))
  (is (= 0 (bisect-left #(#\a #\a) 96 :key #'char-code :end 1)))
  (is (= 0 (bisect-left #(#\a #\a) 97 :key #'char-code :end 1)))
  (is (= 1 (bisect-left #(#\a #\a) 98 :key #'char-code :end 1)))
  (is (= 0 (bisect-left #(1 8) -3)))
  (is (= 0 (bisect-left #(1 8) 1)))
  (is (= 1 (bisect-left #(1 8) 4)))
  (is (= 1 (bisect-left #(1 8) 8)))
  (is (= 2 (bisect-left #(1 8) 9)))
  (is (= 3 (bisect-left #(1 4 5 7 7 7 7 7 7 8) 7)))
  (is (= 3 (bisect-left #(1 4 4 7 7 7 7 7 8) 6)))
  (is (= 1 (bisect-left #(#\a #\c #\c #\d) #\b :order #'char<)))
  (is (= 1 (bisect-left #(#\a #\c #\c #\d) (char-code #\b)
                        :order #'< :key #'char-code)))
  (is (= 0 (bisect-left #(1 4 4 7 7 7 7 7 8) 6 :start 0 :end 0)))
  (is (= 1 (bisect-left #(1 4 4 7 7 7 7 7 8) 6 :start 0 :end 1)))
  (is (= 4 (bisect-left #(nil 1 4 4 7 7 nil nil) 6 :start 1 :end 4))))

(test bisect-right
  (declare (notinline bisect-right))
  (is (= 0 (bisect-right #() 1)))
  (is (= 0 (bisect-right #(#\a #\a) 96 :key #'char-code :end 1)))
  (is (= 1 (bisect-right #(#\a #\a) 97 :key #'char-code :end 1)))
  (is (= 1 (bisect-right #(#\a #\a) 98 :key #'char-code :end 1)))
  (is (= 0 (bisect-right #(1 8) 0)))
  (is (= 2 (bisect-right #(1 8) 8)))
  (is (= 1 (bisect-right #(1 8) 4)))
  (is (= 1 (bisect-right #(1 8) 1)))
  (is (= 2 (bisect-right #(1 8) 9)))
  (is (= 7 (bisect-right #(1 4 5 7 7 7 7 8) 7)))
  (is (= 3 (bisect-right #(1 4 4 7 7 7 7 7 8) 6)))
  (is (= 3 (bisect-right #(10 9 9 7 7 7 7 7 4) 9 :order #'>)))
  (is (= 3 (bisect-right #(#\a #\c #\c #\d) #\c :order #'char<)))
  (is (= 0 (bisect-right #(1 4 4 7 7 7 7 7 8) 6 :start 0 :end 0)))
  (is (= 1 (bisect-right #(1 4 4 7 7 7 7 7 8) 6 :start 0 :end 1)))
  (is (= 4 (bisect-right #(nil 1 4 4 4 4 7 7 nil nil) 4 :start 1 :end 4))))
