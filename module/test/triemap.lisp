(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../triemap.lisp"))

(use-package :test-util)

(with-test (:name triemap)
  (let ((triemap (make-triemap)))
    (triemap-add! triemap "abra" 1)
    (triemap-add! triemap "abrac" 2)
    (triemap-add! triemap "rac" 3)
    (triemap-add! triemap "racad" 4)
    (assert (= 1 (triemap-get triemap "abra")))
    (assert (null (triemap-get triemap "ab")))
    (assert (null (triemap-get triemap "")))
    (triemap-add! triemap "" 5)
    (assert (= 5 (triemap-get triemap "")))
    (assert (equal '(5 2) (multiple-value-list (triemap-query-longest triemap "abracadabra"))))
    (let ((res #(-1 -1 5 -1 -1 3 -1 4)))
      (triemap-query triemap "abracadabra"
                     (lambda (pos value)
                       (assert (= (aref res pos) value)))
                     :start 2))))
