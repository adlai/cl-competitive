(defpackage :cp/test/manhattan-fnn
  (:use :cl :fiveam :cp/manhattan-fnn)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/manhattan-fnn)
(in-suite base-suite)

(defun make-random-points (dim n state)
  (let ((res (make-array n)))
    (dotimes (i n)
      (let ((point (make-array dim :element-type 'fixnum)))
        (dotimes (i dim)
          (setf (aref point i) (- (random #xffffffff state) #x7fffffff)))
        (setf (aref res i) point)))
    res))

(defun calc-fnn-naive (points dim)
  (labels ((calc (i1 i2)
             (let ((point1 (aref points i1))
                   (point2 (aref points i2))
                   (res 0))
               (dotimes (i dim)
                 (incf res (abs (- (aref point1 i) (aref point2 i)))))
               res)))
    (let* ((n (length points))
           (maxs (make-array n :element-type 'fixnum))
           (result (make-array n :element-type 'fixnum)))
      (dotimes (i n)
        (let ((max most-negative-fixnum)
              argmax)
          (dotimes (j n)
            (let ((dist (calc i j)))
              (when (> dist max)
                (setq max dist argmax j))))
          (setf (aref maxs i) max
                (aref result i) argmax)))
      (values result maxs))))

(defun check-result (points dim result maxs)
  (labels ((calc (i1 i2)
             (let ((point1 (aref points i1))
                   (point2 (aref points i2))
                   (res 0))
               (dotimes (i dim)
                 (incf res (abs (- (aref point1 i) (aref point2 i)))))
               res)))
    (let* ((n (length points)))
      (dotimes (i n)
        (let ((j (aref result i)))
          (assert (= (calc i j) (aref maxs i))))))))

(test calc-fnn/random
  (let ((state (sb-ext:seed-random-state 0)))
    (dotimes (_ 10)
      (loop for dim from 1 to 9
            for n = (random 30 state)
            for points = (make-random-points dim n state)
            do(multiple-value-bind (result1 maxs1) (calc-fnn points)
                (check-result points dim result1 maxs1)
                (multiple-value-bind (result2 maxs2) (calc-fnn-naive points dim)
                  (declare (ignore result2))
                  (is (equalp maxs1 maxs2))))))))

(test calc-fnn/hand
  (is (equalp '(#() #()) (multiple-value-list (calc-fnn #()))))
  (is (equalp '(#(0) #(0)) (multiple-value-list (calc-fnn #(#(1 2 3 4 5))))))
  (is (equalp #(0 0) (nth-value 1 (calc-fnn #(#(1 2 3 4 5) #(1 2 3 4 5)))))))
