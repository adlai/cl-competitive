(defpackage :cp/test/csc
  (:use :cl :fiveam :cp/csc)
  (:import-from :cp/test/base #:base-suite)
  (:import-from :cp/csc #:csc-float #:+zero+))
(in-package :cp/test/csc)
(in-suite base-suite)

(test csc/constructor
  (let ((*test-dribble* nil))
    (dotimes (m 10)
      (dotimes (n 10)
        (dolist (rate '(0d0 0.2d0 0.4d0 0.6d0 0.8d0 1d0))
          (let ((mat (make-array (list m n)
                                 :element-type 'csc-float
                                 :initial-element +zero+)))
            (dotimes (i m)
              (dotimes (j n)
                (when (< (random 1d0) rate)
                  (setf (aref mat i j) (- (random 100d0) 50d0)))))
            (let ((csc (make-csc-from-array mat)))
              (is (equalp (csc-to-array csc) mat))))
          (let ((mat (make-array (list m n) :element-type 'csc-float))
                (count (round (* rate m n)))
                (rows (make-array 0 :element-type 'fixnum :fill-pointer 0))
                (cols (make-array 0 :element-type 'fixnum :fill-pointer 0))
                (values (make-array 0 :element-type 'csc-float :fill-pointer 0)))
            (when (and (> m 0) (> n 0))
              (dotimes (_ count)
                (let ((i (random m))
                      (j (random n))
                      (value (- (random 100d0) 50d0)))
                  (setf (aref mat i j) value)
                  (vector-push-extend i rows)
                  (vector-push-extend j cols)
                  (vector-push-extend value values))))
            (let ((csc (make-csc-from-coo m n rows cols values))
                  (csc2 (make-csc-from-array mat)))
              (is (equalp csc csc2)))))))))
