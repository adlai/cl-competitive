(defpackage :cp/test/find-argopt
  (:use :cl :fiveam :cp/find-argopt)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/find-argopt)
(in-suite base-suite)

(defun find-argopt* (sequence predicate &key start end (key #'identity))
  (multiple-value-list (find-argopt sequence predicate :start start :end end :key key)))

(defun coerce-to-hash-table (alist)
  (let ((table (make-hash-table)))
    (loop for (key . value) in alist
          do (setf (gethash key table) value))
    table))

(test find-argopt
  ;; list
  (let ((lst '(3 2 3 4 5 2)))
    (is (equalp '(1 2) (find-argopt* lst #'<)))
    (is (equalp '(5 2) (find-argopt* lst #'<=)))
    (is (equalp '(4 5) (find-argopt* lst #'>)))
    (is (equalp '(5 2) (find-argopt* lst #'< :start 3)))
    (is (equalp '(1 2) (find-argopt* lst #'< :start 1)))
    (is (equalp '(1 2) (find-argopt* lst #'< :start 1 :end 4)))
    (is (equalp '(5 2) (find-argopt* lst #'< :start 3)))
    (is (equalp '(0 3) (find-argopt* lst #'< :end 1)))
    (is (equalp '(1 2) (find-argopt* lst #'< :key #'1+)))
    (is (equalp '(4 5) (find-argopt* lst #'< :key #'-)))
    (signals error (find-argopt* lst #'< :end 0))
    (signals error (find-argopt* lst #'< :start 7))
    (signals error (find-argopt* '() #'<)))
  ;; vector
  (let ((vec #(3 2 3 4 5 2)))
    (is (equalp '(1 2) (find-argopt* vec #'<)))
    (is (equalp '(5 2) (find-argopt* vec #'<=)))
    (is (equalp '(4 5) (find-argopt* vec #'>)))
    (is (equalp '(5 2) (find-argopt* vec #'< :start 3)))
    (is (equalp '(1 2) (find-argopt* vec #'< :start 1)))
    (is (equalp '(1 2) (find-argopt* vec #'< :start 1 :end 4)))
    (is (equalp '(5 2) (find-argopt* vec #'< :start 3)))
    (is (equalp '(0 3) (find-argopt* vec #'< :end 1)))
    (is (equalp '(1 2) (find-argopt* vec #'< :key #'1+)))
    (is (equalp '(4 5) (find-argopt* vec #'< :key #'-)))
    (signals error (find-argopt* vec #'< :end 0))
    (signals error (find-argopt* vec #'< :start 7))
    (signals error (find-argopt* #() #'<)))
  ;; hash-table
  (let ((table (coerce-to-hash-table '((#\a . 3) (#\b . 2) (#\c . 3) (#\d . 4) (#\e . 5) (#\f . 2)))))
    (is (equalp '(#\b 2) (find-argopt* table #'<)))
    (is (equalp '(#\f 2) (find-argopt* table #'<=)))
    (is (equalp '(#\e 5) (find-argopt* table #'>)))
    (is (equalp '(#\b 2) (find-argopt* table #'< :key #'1+)))
    (is (equalp '(#\e 5) (find-argopt* table #'< :key #'-)))
    (signals error (find-argopt* table #'< :end 0))
    (signals error (find-argopt* table #'< :start 7))
    (signals error (find-argopt* '() #'<))))
