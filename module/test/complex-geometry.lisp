(defpackage :cp/test/complex-geometry
  (:use :cl :fiveam :cp/complex-geometry)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/complex-geometry)
(in-suite base-suite)

(test cross*
  (is (= 0 (cross* #c(1 3) #c(2 6))))
  (is (= -6 (cross* #c(5 7) #c(13 17)))))

(test inside-convex-polygon-p
  (let ((tri #(#c(0 0) #c(2 0) #c(0 3))))
    (is (inside-convex-polygon-p #c(1 1) tri))
    (is (not (inside-convex-polygon-p #c(1 2) tri)))
    (is (not (inside-convex-polygon-p #c(0 0) tri)))
    (is (not (inside-convex-polygon-p #c(2 0) tri)))
    (is (not (inside-convex-polygon-p #c(0 3) tri)))))

(test in-circle
  (let ((a #c(2 1))
        (b #c(0 5))
        (c #c(-1 2)))
    (dolist (p '(#c(-1 3)
                 #c(0 2) #c(0 3) #c(0 4)
                 #c(1 1) #c(1 2) #c(1 3) #c(1 4) #c(1 5)
                 #c(2 2) #c(2 3) #c(2 4)
                 #c(3 3)))
      (is (> (in-circle a b c p) 0))
      (is (> (in-circle b a c p) 0)))
    (dolist (p '(#c(-1 2) #c(-1 4) #c(0 1) #c(0 5)
                 #c(2 1) #c(2 5)
                 #c(3 2) #c(3 4)))
      (is (= (in-circle a b c p) 0))
      (is (= (in-circle b a c p) 0)))
    (dolist (p '(#c(-2 2)
                 #c(-1 1) #c(-1 5) #c(0 0) #c(0 6)
                 #c(1 0) #c(1 6) #c(2 0) #c(2 6)
                 #c(3 1) #c(3 5)))
      (is (< (in-circle a b c p) 0))
      (is (< (in-circle b a c p) 0)))))

(defun rand (max)
  (complex (- (random (* max 2)) max) (- (random (* max 2)) max)))

(test barycentric
  (let ((*random-state* (sb-ext:seed-random-state 0))
        (*test-dribble* nil))
    (dotimes (_ 1000)
      (let ((a (rand 200))
            (b (rand 200))
            (c (rand 200))
            (p (rand 200)))
        (unless (zerop (cross* (- b a) (- c a)))
          (multiple-value-bind (u v w) (barycentric a b c p)
            (is (= p (+ (* u a) (* v b) (* w c))))))))))


(test is-convex-quad
  (let ((*random-state* (sb-ext:seed-random-state 0))
        (*test-dribble* nil))
    (labels ((symmetric-p (a b c d)
               (let (res)
                 (push (convex-quad-p a b c d) res)
                 (push (convex-quad-p b c d a) res)
                 (push (convex-quad-p c d a b) res)
                 (push (convex-quad-p d a b c) res)
                 (push (convex-quad-p d c b a) res)
                 (push (convex-quad-p c b a d) res)
                 (push (convex-quad-p b a d c) res)
                 (push (convex-quad-p a d c b) res)
                 (or (loop for x in res always x)
                     (loop for x in res never x)))))
      (is (not (convex-quad-p #c(1 3) #c(-3 1) #c(-1 -1) #c(-1 1))))
      (is (not (convex-quad-p #c(1 3) #c(-3 1) #c(-1 -1) #c(0 1))))
      (is (convex-quad-p #c(1 3) #c(-3 1) #c(-1 -1) #c(1/1000 1)))
      (is (convex-quad-p #c(1 3) #c(-3 1) #c(-1 -1) #c(1 1)))
      (dotimes (_ 1000)
        (is (symmetric-p (rand 200) (rand 200) (rand 200) (rand 200)))))))
