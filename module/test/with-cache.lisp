(defpackage :cp/test/with-cache
  (:use :cl :fiveam :cp/with-cache)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/with-cache)
(in-suite base-suite)

(test with-cache
  ;; array
  (macrolet ((frob ()
               `(progn (is (= 3 (add 1 2)))
                       (is (equal '((1 . 2) (0 . 2)) (reverse call-stack)))
                       (setq call-stack nil)
                       (is (= 2 (add 0 2)))
                       (is (null call-stack))
                       (setq call-stack nil)
                       (is (= 4 (add 2 2)))
                       (is (equal '((2 . 2)) (reverse call-stack)))
                       (setq call-stack nil)
                       (is (= 3 (add 1 2)))
                       (is (null call-stack)))))
    ;; array
    (let (call-stack)
      (with-cache (:array (3 3) :initial-element -1)
        (labels ((add (x y)
                   (push (cons x y) call-stack)
                   (if (zerop x)
                       y
                       (+ 1 (add (- x 1) y)))))
          (frob))))
    ;; hash-table
    (let (call-stack)
      (with-cache (:hash-table :test #'equal)
        (labels ((add (x y)
                   (push (cons x y) call-stack)
                   (if (zerop x)
                       y
                       (+ 1 (add (- x 1) y)))))
          (frob))))
    ;; return-from block
    (let (call-stack)
      (with-cache (:hash-table :test #'equal)
        (labels ((add (x y)
                   (push (cons x y) call-stack)
                   (when (zerop x)
                     (return-from add y))
                   (+ 1 (add (- x 1) y))))
          (frob)))))
  ;; (let (call-stack)
  ;;   (with-caches ((:hash-table :test #'equal)
  ;;                 (:array (3 3) :initial-element -1))
  ;;     (labels ((add1 (x y)
  ;;                (push (cons x y) call-stack)
  ;;                (when (zerop x)
  ;;                  (return-from add1 y))
  ;;                (+ 1 (add2 (- x 1) y)))
  ;;              (add2 (x y)
  ;;                (push (cons x y) call-stack)
  ;;                (when (zerop x)
  ;;                  (return-from add2 y))
  ;;                (+ 1 (add1 (- x 1) y)))))))
  )
