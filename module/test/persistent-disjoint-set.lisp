(defpackage :cp/test/persistent-disjoint-set
  (:use :cl :fiveam :cp/persistent-disjoint-set)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/persistent-disjoint-set)
(in-suite base-suite)

(test persistent-disjoint-set
  (let ((tree (make-persistent-disjoint-set 6)))
    (pds-unite! tree 1 3)
    (pds-unite! tree 3 5)
    (pds-unite! tree 1 5)
    (pds-unite! tree 2 4)
    (pds-unite! tree 1 2)
    (is (equalp (vector most-positive-fixnum most-positive-fixnum 5 1 4 2)
                (pds-timestamps tree)))
    (is (equalp (vector -1 -5 1 1 2 1) (pds-data tree)))

    ;; size
    (is (= 1 (pds-size tree 0 0)))
    (is (= 1 (pds-size tree 0 1)))
    (is (= 1 (pds-size tree 0 2)))
    (is (= 1 (pds-size tree 0 3)))
    (is (= 1 (pds-size tree 0 4)))
    (is (= 1 (pds-size tree 0 5)))
    (is (= 1 (pds-size tree 1 0)))
    (is (= 2 (pds-size tree 1 1)))
    (is (= 3 (pds-size tree 1 2)))
    (is (= 3 (pds-size tree 1 3)))
    (is (= 3 (pds-size tree 1 4)))
    (is (= 5 (pds-size tree 1 5)))
    (is (= 1 (pds-size tree 2 0)))
    (is (= 1 (pds-size tree 2 1)))
    (is (= 1 (pds-size tree 2 2)))
    (is (= 1 (pds-size tree 2 3)))
    (is (= 2 (pds-size tree 2 4)))
    (is (= 5 (pds-size tree 2 5)))
    (is (= 1 (pds-size tree 5 0)))
    (is (= 1 (pds-size tree 5 1)))
    (is (= 3 (pds-size tree 5 2)))
    (is (= 3 (pds-size tree 5 3)))
    (is (= 3 (pds-size tree 5 4)))
    (is (= 5 (pds-size tree 5 5)))
    (signals persistent-disjoint-set-query-future (pds-size tree 0 6))))
