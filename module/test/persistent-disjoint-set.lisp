(defpackage :cp/test/persistent-disjoint-set
  (:use :cl :fiveam :cp/persistent-disjoint-set)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/persistent-disjoint-set)
(in-suite base-suite)

(test persistent-disjoint-set
  (let ((tree (make-persistent-disjoint-set 6)))
    (pds-unite! 1 3 tree)
    (pds-unite! 3 5 tree)
    (pds-unite! 1 5 tree)
    (pds-unite! 2 4 tree)
    (pds-unite! 1 2 tree)
    (is (equalp (vector most-positive-fixnum most-positive-fixnum 5 1 4 2)
                (pds-timestamps tree)))
    (is (equalp (vector -1 -5 1 1 2 1) (pds-data tree)))

    ;; size
    (is (= 1 (pds-size 0 0 tree)))
    (is (= 1 (pds-size 0 1 tree)))
    (is (= 1 (pds-size 0 2 tree)))
    (is (= 1 (pds-size 0 3 tree)))
    (is (= 1 (pds-size 0 4 tree)))
    (is (= 1 (pds-size 0 5 tree)))
    (is (= 1 (pds-size 1 0 tree)))
    (is (= 2 (pds-size 1 1 tree)))
    (is (= 3 (pds-size 1 2 tree)))
    (is (= 3 (pds-size 1 3 tree)))
    (is (= 3 (pds-size 1 4 tree)))
    (is (= 5 (pds-size 1 5 tree)))
    (is (= 1 (pds-size 2 0 tree)))
    (is (= 1 (pds-size 2 1 tree)))
    (is (= 1 (pds-size 2 2 tree)))
    (is (= 1 (pds-size 2 3 tree)))
    (is (= 2 (pds-size 2 4 tree)))
    (is (= 5 (pds-size 2 5 tree)))
    (is (= 1 (pds-size 5 0 tree)))
    (is (= 1 (pds-size 5 1 tree)))
    (is (= 3 (pds-size 5 2 tree)))
    (is (= 3 (pds-size 5 3 tree)))
    (is (= 3 (pds-size 5 4 tree)))
    (is (= 5 (pds-size 5 5 tree)))
    (signals persistent-disjoint-set-query-future (pds-size 0 6 tree))))
