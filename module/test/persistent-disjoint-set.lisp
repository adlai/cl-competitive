(defpackage :cp/test/persistent-disjoint-set
  (:use :cl :fiveam :cp/persistent-disjoint-set)
  (:import-from :cp/test/base #:base-suite))
(in-package :cp/test/persistent-disjoint-set)
(in-suite base-suite)

(test persistent-disjoint-set
  (let ((dset (make-persistent-disjoint-set 6)))
    (pds-unite! dset 1 3)
    (pds-unite! dset 3 5)
    (pds-unite! dset 1 5)
    (pds-unite! dset 2 4)
    (is (null (pds-opening-time dset 1 4)))
    (pds-unite! dset 1 2)
    (is (= 5 (pds-opening-time dset 1 4)))
    (is (equalp (vector most-positive-fixnum most-positive-fixnum 5 1 4 2)
                (pds-timestamps dset)))
    (is (equalp (vector -1 -5 1 1 2 1) (pds-data dset)))

    ;; size
    (is (= 1 (pds-size dset 0 0)))
    (is (= 1 (pds-size dset 0 1)))
    (is (= 1 (pds-size dset 0 2)))
    (is (= 1 (pds-size dset 0 3)))
    (is (= 1 (pds-size dset 0 4)))
    (is (= 1 (pds-size dset 0 5)))
    (is (= 1 (pds-size dset 1 0)))
    (is (= 2 (pds-size dset 1 1)))
    (is (= 3 (pds-size dset 1 2)))
    (is (= 3 (pds-size dset 1 3)))
    (is (= 3 (pds-size dset 1 4)))
    (is (= 5 (pds-size dset 1 5)))
    (is (= 1 (pds-size dset 2 0)))
    (is (= 1 (pds-size dset 2 1)))
    (is (= 1 (pds-size dset 2 2)))
    (is (= 1 (pds-size dset 2 3)))
    (is (= 2 (pds-size dset 2 4)))
    (is (= 5 (pds-size dset 2 5)))
    (is (= 1 (pds-size dset 5 0)))
    (is (= 1 (pds-size dset 5 1)))
    (is (= 3 (pds-size dset 5 2)))
    (is (= 3 (pds-size dset 5 3)))
    (is (= 3 (pds-size dset 5 4)))
    (is (= 5 (pds-size dset 5 5)))
    (signals persistent-disjoint-set-query-future (pds-size dset 0 6))))
