(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../double-stack-deque.lisp"))

(use-package :test-util)

(with-test (:name double-stack-deque)
  (let ((deque (make-dsdeque '(5 6 7))))
    (assert (= 7 (dsdeque-pop-back deque)))
    (dsdeque-push-front 4 deque)
    (dsdeque-push-back 7 deque)
    (dsdeque-push-back 8 deque)
    (assert (= 4 (dsdeque-pop-front deque)))
    (assert (= 5 (dsdeque-pop-front deque)))
    (assert (= 6 (dsdeque-pop-front deque)))
    (assert (= 8 (dsdeque-pop-back deque)))
    (assert (= 7 (dsdeque-pop-back deque)))
    (signals dsdeque-empty-error (dsdeque-pop-front deque))
    (signals dsdeque-empty-error (dsdeque-pop-back deque))))
