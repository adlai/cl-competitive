(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../condensation.lisp"))

(use-package :test-util)

(with-test (:name scc/manual)
  ;; null graph
  (let ((scc (make-scc #())))
    (assert (equalp #() (scc-components scc)))
    (assert (= 0 (scc-count scc)))
    (assert (equalp #() (scc-sizes scc))))
  ;; graph of a vertex
  (let ((scc (make-scc #(()))))
    (assert (equalp #(0) (scc-components scc)))
    (assert (= 1 (scc-count scc)))
    (assert (equalp #(1) (scc-sizes scc))))
  ;; graph of two vertices
  (let ((scc (make-scc #((1) ()))))
    (assert (or (equalp #(0 1) (scc-components scc))
                (equalp #(1 0) (scc-components scc))))
    (assert (= 2 (scc-count scc)))
    (assert (equalp #(1 1) (scc-sizes scc))))
  (let ((scc (make-scc #(() (0)))))
    (assert (or (equalp #(0 1) (scc-components scc))
                (equalp #(1 0) (scc-components scc))))
    (assert (= 2 (scc-count scc)))
    (assert (equalp #(1 1) (scc-sizes scc))))
  (let ((scc (make-scc #((1) (0)))))
    (assert (equalp #(0 0) (scc-components scc)))
    (assert (= 1 (scc-count scc)))
    (assert (= 2 (aref (scc-sizes scc) 0))))
  (let ((scc (make-scc #(() ()))))
    (assert (or (equalp #(0 1) (scc-components scc))
                (equalp #(1 0) (scc-components scc))))
    (assert (= 2 (scc-count scc)))
    (assert (equalp #(1 1) (scc-sizes scc))))
  (let ((scc (make-scc #((1) (2) (0)))))
    (assert (equalp #(0 0 0) (scc-components scc)))
    (assert (= 1 (scc-count scc)))
    (assert (= 3 (aref (scc-sizes scc) 0))))
  (let ((scc (make-scc #((1) (0) ()))))
    (assert (or (equalp #(0 0 1) (scc-components scc))
                (equalp #(1 1 0) (scc-components scc))))
    (assert (= 2 (scc-count scc)))
    (assert (or (equalp #(2 1) (subseq (scc-sizes scc) 0 2))
                (equalp #(1 2) (subseq (scc-sizes scc) 0 2)))))
  (let ((scc (make-scc #((1) (2) (0)) #((2) (0) (1)))))
    (assert (equalp #(0 0 0) (scc-components scc)))
    (assert (= 1 (scc-count scc)))
    (assert (= 3 (aref (scc-sizes scc) 0)))))

;; We believe two SCC's are identical if the sorted SIZES are identical.
(defun scc-maybe= (scc1 scc2)
  (let ((sizes1 (sort (copy-seq (scc-sizes scc1)) #'<))
        (sizes2 (sort (copy-seq (scc-sizes scc2)) #'<)))
    (equalp sizes1 sizes2)))

(with-test (:name 2sat)
  (2sat-solve (make-2sat 0))
  (let ((2sat (make-2sat 1)))
    (add-implication 2sat 0 (negate 0))
    (assert (equalp #(0) (2sat-solve 2sat))))
  (let ((2sat (make-2sat 1)))
    (add-implication 2sat (negate 0) 0)
    (assert (equalp #(1) (2sat-solve 2sat))))
  (let ((2sat (make-2sat 1)))
    (add-implication 2sat 0 (negate 0))
    (add-implication 2sat (negate 0) 0)
    (assert (null (2sat-solve 2sat)))))
