(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../next-permutation.lisp")
  (load "../map-permutations.lisp")
  (load "./set-equal.lisp"))

(use-package :test-util)

(with-test (:name next-permutation)
  (signals no-permutation-error (next-permutation! #()))
  (signals no-permutation-error (next-permutation! #(#\a) :order #'char<))
  (assert (equalp #(#\b #\a) (next-permutation! #(#\a #\b) :order #'char<)))
  (signals no-permutation-error (next-permutation! #(#\b #\a) :order #'char<))
  (let (perms1 perms2)
    (let ((s (copy-seq "abcdef")))
      (dotimes (i 720)
        (push (copy-seq s) perms1)
        (when (< i 719) (next-permutation! s :order #'char<)))
      (setq perms1 (reverse perms1)))
    (let ((s (copy-seq "abcdef")))
      (do-permutations! (perm s)
        (push (copy-seq perm) perms2))
      (setq perms2 (sort perms2 #'string<)))
    (assert (equalp perms1 perms2))))
