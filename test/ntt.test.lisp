(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../ntt.lisp")
  (load "../polynomial.lisp"))

(use-package :test-util)

(with-test (:name ntt/manual)
  (assert (equalp #() (ntt-convolute #() #())))
  (assert (equalp #(15) (ntt-convolute #(3) #(5))))
  (assert (equalp #(998244308 17 2 998244348 1)
                  (ntt-convolute #(5 998244350 1) #(998244344 998244351 1))))
  (signals division-by-zero (ntt-inverse #()))
  (signals division-by-zero (ntt-inverse #(0 2))))

(defun make-random-polynomial (degree)
  (let ((res (make-array degree :element-type 'ntt-int :initial-element 0)))
    (dotimes (i degree res)
      (setf (aref res i) (random +ntt-mod+)))))

(with-test (:name ntt/random)
  (dotimes (_ 1000)
    (let* ((len1 (random 10))
           (len2 (random 10))
           (poly1 (make-random-polynomial len1))
           (poly2 (make-random-polynomial len2)))
      (assert (equalp (poly-mult poly1 poly2 +ntt-mod+)
                      (ntt-convolute poly1 poly2)))
      (when (find-if #'plusp poly1)
        (let ((res (ntt-convolute poly1 (ntt-inverse poly1))))
          (assert (= 1 (aref res 0)))
          (loop for i from 1 below len1
                do (assert (zerop (aref res i)))))))))
