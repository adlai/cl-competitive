(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../parallel-sort"))

(use-package :test-util)

(with-test (:name parallel-shuffle!)
  (let ((vector1 (coerce (loop for v below 26 collect (code-char (+ v 65))) 'vector))
        (vector2 (coerce (loop for v below 26 collect (code-char (+ v 97))) 'vector))
        (vector3 (coerce (loop for v below 26 collect v) 'vector)))
    (dotimes (i 200)
      (if (> i 100)
          (locally (declare (notinline parallel-shuffle!))
            (parallel-shuffle! vector1 vector2 vector3))
          (parallel-shuffle! vector1 vector2 vector3))
      (dotimes (i 26)
        (assert (= (- (char-code (aref vector1 i)) 65)
                   (- (char-code (aref vector2 i)) 97)
                   (aref vector3 i)))))))

(with-test (:name parallel-sort!)
  (let ((vector1 (coerce (loop for v below 26 collect (code-char (+ v 65))) 'vector))
        (vector2 (coerce (loop for v below 26 collect (code-char (+ v 97))) 'vector))
        (vector3 (coerce (loop for v below 26 collect v) 'vector)))
    (dotimes (i 200)
      (if (> i 100)
          (locally (declare (notinline parallel-shuffle!))
            (parallel-shuffle! vector1 vector2 vector3)
            (parallel-sort! vector1 #'char< vector2 vector3))
          (progn
            (parallel-shuffle! vector1 vector2 vector3)
            (parallel-sort! vector1 #'char< vector2 vector3)))
      (dotimes (i 26)
        (assert (= (- (char-code (aref vector1 i)) 65)
                   (- (char-code (aref vector2 i)) 97)
                   (aref vector3 i))))
      (dotimes (i 25)
        (assert (char< (aref vector1 i) (aref vector1 (+ i 1))))
        (assert (char< (aref vector2 i) (aref vector2 (+ i 1))))
        (assert (< (aref vector3 i) (aref vector3 (+ i 1))))))))
