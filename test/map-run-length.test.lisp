(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../map-run-length.lisp"))

(use-package :test-util)

(with-test (:name map-run-length)
  (map-run-length (lambda (x y) (error "Must not be called.")) #())
  (let ((result '((1 . 1) (2 . 2) (3 . 2) (1 . 3) (2 . 2))))
    (map-run-length (lambda (x y) (assert (equal (cons x y) (pop result))))
                    #(1 2 2 3 3 1 1 1 2 2)))
  (map-run-length (lambda (x y) (assert (and (= 0 x) (= 3 y))))
                  #(0 0.0 0)
                  :test #'=)
  (map-run-length (lambda (x y) (error "Must not be called.")) nil)
  (let ((result '((1 . 1) (2 . 2) (3 . 2) (1 . 3) (2 . 2))))
    (map-run-length (lambda (x y) (assert (equal (cons x y) (pop result))))
                    '(1 2 2 3 3 1 1 1 2 2)))
  (map-run-length (lambda (x y) (assert (and (= 0 x) (= 3 y))))
                  '(0 0.0 0)
                  :test #'=))
