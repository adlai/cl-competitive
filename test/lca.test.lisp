(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "test-util")
  (load "../lca.lisp"))

(use-package :test-util)

(with-test (:name lca)
  (let* ((graph (make-array 8 :element-type 'list :initial-contents '((1 2) (0 3 4) (0 5) (1) (1 6 7) (2) (4) (4))))
         (graph2 (make-array 9 :element-type 'list :initial-contents '((1) (0 2) (1 3) (2 4) (3 5) (4 6) (5 7) (6 8) (7))))
         (table (make-lca-table graph :root 0))
         (table2 (make-lca-table graph2)))
    (assert (= 4 (lca-get-lca table 6 7)))
    (assert (= 1 (lca-get-lca table 3 7)))
    (assert (= 0 (lca-get-lca table 3 5)))
    (assert (= 0 (lca-get-lca table 5 3)))
    (assert (= 4 (lca-get-lca table 4 4)))
    (assert (= 5 (lca-distance table 7 5)))
    (assert (= 0 (lca-distance table 4 4)))
    (assert (= 1 (lca-distance table 3 1)))
    (dotimes (u 9)
      (dotimes (v 9)
        (assert (= (min u v) (lca-get-lca table2 u v)))))
    (signals type-error (lca-get-lca table -1 0)))
  ;; forest
  (let ((table (make-lca-table #((3) () (6) (7 0 9) (7) () (2) (4 3) () (3)))))
    (assert (equalp #(0 0 0 1 3 0 1 2 0 2) (lca-depths table)))
    (signals two-vertices-disconnected-error (lca-get-lca table 0 1))
    (signals two-vertices-disconnected-error (lca-distance table 1 2))))
